import usb.core
import usb.util
from usb.core import *
import sys
import os
import binascii
import time
#import serial    
import itertools
import threading

def debugout():
    print "starting debug term"
    #reqtype vendor, device to host
    bmRequestType = 0b11000000
    #request getlog = 5
    bmRequest = 5
    wValue = 0
    wIndex = 0
    while(True):
        ret = ''
        ret = device.read(0x82, 64, 10000000000)
        sret = ''.join([chr(x) for x in ret])
        print sret
        time.sleep(.01)
        if key == ord('q'):
            break
    usb.util.dispose_resources(device)


def usbField(pos, val):
	if pos == 0:
		return "length"
	elif pos == 1:
		if(val == 1):
			return "device"
		elif(val == 2):
			return "configuration"
		elif(val == 3):
			return "string"
		elif(val == 4):
			return "interface"
		elif(val == 5):
			return "endpoint"
		elif(val == 6):
			return "device qualifier"
		elif(val == 7):
			return "other speed"
		elif(val == 8):
			return "interface power"
		elif(val == 9):
			return "OTG"
		elif(val == 10):
			return "debug"
		elif(val == 11):
			return "interface association"
		elif(val == 36):
			return "CS interface"
		else:
			return ''
	else:
		return ''

idV = 0x04B4
idP = 0x4722

# doesnt seem to write anything to log?!
os.environ['PYUSB_DEBUG'] = 'debug'
#os.environ['PYUSB_LOG_FILENAME'] = "pyusb.log" #never written


print "finding idVendor = {}, idProduct= {}".format(idV, idP)

device = None
while device is None:
    device = usb.core.find(idVendor=idV, idProduct=idP)
device.reset()

# free up the device from the kernal
for cfg in device:
    for intf in cfg:
        #if device.is_kernel_driver_active(intf.bInterfaceNumber) and intf.bInterfaceNumber == 2:
        if device.is_kernel_driver_active(intf.bInterfaceNumber):
            try:
                device.detach_kernel_driver(intf.bInterfaceNumber)
            except usb.core.USBError as e:
                sys.exit("Could not detach kernel driver from interface({0}): {1}".format(intf.bInterfaceNumber, str(e)))

# try default conf
print "setting configuration"
#device.set_configuration()
print "config set"

print "trying to claim device"
try:
#    usb.util.claim_interface(device, 0)
#    usb.util.claim_interface(device, 1)
    usb.util.claim_interface(device, 2)
    print "claimed device"
except usb.core.USBError as e:
    print "Error occurred claiming " + str(e)
    sys.exit("Error occurred on claiming")
print "device claimed"

# get enpoint instance
cfg = device.get_active_configuration()
print "***********"
for intf in cfg:
    print "intf= " + str(intf)
print "***********"

## request the raw device descriptor
#reqtype vendor, device to host
bmRequestType = 0b10000000
bmRequest = 6  #GET_DESCRIPTOR
wValue = 0x0100     #Descriptor type and index - Device
wIndex = 0     #zero or language id
wLength = 8    #start with first 8 bytes
ret = device.ctrl_transfer(bmRequestType, bmRequest, wValue, wIndex, wLength)
wLength = ret[0]    #update bytecount
ret = device.ctrl_transfer(bmRequestType, bmRequest, wValue, wIndex, wLength)
print ''.join('{:02x}'.format(x) + " "  for x in ret)

## request the raw configuration descriptor
#reqtype vendor, device to host
wValue = 0x0200     #Descriptor type and index - config
wLength = 8    #start with first 8 bytes
ret = device.ctrl_transfer(bmRequestType, bmRequest, wValue, wIndex, wLength)
wLength = ret[4]*256 + ret[3]    #update bytecount
ret = device.ctrl_transfer(bmRequestType, bmRequest, wValue, wIndex, wLength)

debugout()


